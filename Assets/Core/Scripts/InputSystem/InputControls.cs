//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Core/Scripts/InputSystem/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Gyroscope"",
            ""id"": ""47947f13-c532-4807-b416-46d5229ac83e"",
            ""actions"": [
                {
                    ""name"": ""GyroscopeValue"",
                    ""type"": ""Value"",
                    ""id"": ""2fd8ce0c-86da-4b72-8677-472ed0bb0eeb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12b90121-a5e3-47af-acb8-dbbabdc8dd14"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GyroscopeValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gyroscope
        m_Gyroscope = asset.FindActionMap("Gyroscope", throwIfNotFound: true);
        m_Gyroscope_GyroscopeValue = m_Gyroscope.FindAction("GyroscopeValue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gyroscope
    private readonly InputActionMap m_Gyroscope;
    private IGyroscopeActions m_GyroscopeActionsCallbackInterface;
    private readonly InputAction m_Gyroscope_GyroscopeValue;
    public struct GyroscopeActions
    {
        private @InputControls m_Wrapper;
        public GyroscopeActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GyroscopeValue => m_Wrapper.m_Gyroscope_GyroscopeValue;
        public InputActionMap Get() { return m_Wrapper.m_Gyroscope; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GyroscopeActions set) { return set.Get(); }
        public void SetCallbacks(IGyroscopeActions instance)
        {
            if (m_Wrapper.m_GyroscopeActionsCallbackInterface != null)
            {
                @GyroscopeValue.started -= m_Wrapper.m_GyroscopeActionsCallbackInterface.OnGyroscopeValue;
                @GyroscopeValue.performed -= m_Wrapper.m_GyroscopeActionsCallbackInterface.OnGyroscopeValue;
                @GyroscopeValue.canceled -= m_Wrapper.m_GyroscopeActionsCallbackInterface.OnGyroscopeValue;
            }
            m_Wrapper.m_GyroscopeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GyroscopeValue.started += instance.OnGyroscopeValue;
                @GyroscopeValue.performed += instance.OnGyroscopeValue;
                @GyroscopeValue.canceled += instance.OnGyroscopeValue;
            }
        }
    }
    public GyroscopeActions @Gyroscope => new GyroscopeActions(this);
    public interface IGyroscopeActions
    {
        void OnGyroscopeValue(InputAction.CallbackContext context);
    }
}
